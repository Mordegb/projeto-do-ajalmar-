#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "estado.h"

// Ponteiro para array de ponteiros de estados
estd** estados = NULL;
int total_estados = 0;


void limpar_getchar() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

// Carrega estados do arquivo
void carregar_estados() {
    FILE* f = fopen("estado.bin", "rb");

    fseek(f, 0, SEEK_END);
    long tamanho = ftell(f);
    fseek(f, 0, SEEK_SET);

    total_estados = tamanho / sizeof(estd);
    estados = (estd**)malloc(total_estados * sizeof(estd*));

    for (int i = 0; i < total_estados; i++) {
        estados[i] = (estd*)malloc(sizeof(estd));
        fread(estados[i], sizeof(estd), 1, f);
    }
    fclose(f);
}

// Salva estados no arquivo
void salvar_estados_arq() {
    FILE* f = fopen("estado.bin", "wb");
    for (int i = 0; i < total_estados; i++) {
        fwrite(estados[i], sizeof(estd), 1, f);
    }
    fclose(f);
}

// Libera toda a memória alocada
void liberar_memoria_uf() {
    for (int i = 0; i < total_estados; i++) {
        free(estados[i]);
    }
    free(estados);
    estados = NULL;
    total_estados = 0;
}

// Verifica se um codigo já existe
int testar_chave_primaria_code(int codigo) {
    for (int i = 0; i < total_estados; i++) {
        if (estados[i]->codigo == codigo) {
            return 1;
        }
    }
    return 0;
}

// Adiciona novo estado usando ponteiro
void adicionar_estado(estd* novo) {
    total_estados++;
    estados = (estd**)realloc(estados, total_estados * sizeof(estd*));
    estados[total_estados - 1] = (estd*)malloc(sizeof(estd));

    // Copia dados usando ponteiros
    estados[total_estados - 1]->codigo = novo->codigo;
    strncpy(estados[total_estados - 1]->nome, novo->nome, sizeof(novo->nome) - 1);
    strncpy(estados[total_estados - 1]->sigla, novo->sigla, sizeof(novo->sigla) - 1);

    salvar_estados_arq();
}

// Interface para adicionar estado usando ponteiro
void adicionar_estado_ui() {
    estd* novo = (estd*)malloc(sizeof(estd));

    int codigo_valido = 0;

    while (!codigo_valido) {    //editar para ficcar mais simples e feito por um iniciante.
        printf("codigo do estado: ");
        scanf("%d", &novo->codigo);
        limpar_getchar();
        if (testar_chave_primaria_code(novo->codigo)) {
            printf("chave ja cadastrada.\n");
        } else {
            codigo_valido = 1;
        }
    }

    printf("Nome do estado: ");
    fflush(stdin);
    gets(novo -> nome);

    printf("Sigla do estado (2 caracteres): ");
    fflush(stdin);
    gets(novo -> sigla);

    adicionar_estado(novo);
    free(novo); // Libera memória após cópia
}

// Lista todos os estados usando ponteiros
void listar_estados() {
    for (int i = 0; i < total_estados; i++) {
        printf("\n");
        printf("Codigo: %d\n", estados[i]->codigo);
        printf("Nome: %s\n", estados[i]->nome);
        printf("Sigla: %s\n", estados[i]->sigla);
        printf("\n");
    }
}

// Busca estado por nome usando ponteiros
void buscar_por_nome(const char* nome_a_buscar) {
    for (int i = 0; i < total_estados; i++) {
        if (strcmp(estados[i]->nome, nome_a_buscar) == 0) {
            printf("Codigo: %d\n", estados[i]->codigo);
            printf("Nome: %s\n", estados[i]->nome);
            printf("Sigla: %s\n", estados[i]->sigla);
            printf("\n");
            return;
        }
    }
    printf("Estado não encontrado!\n");
}

// Busca estado por codigo usando ponteiros
void buscar_por_codigo_uf(int codigo_a_buscar) {
    for (int i = 0; i < total_estados; i++) {
        if (estados[i]->codigo == codigo_a_buscar) {
            printf("codigo: %d\n", estados[i]->codigo);
            printf("Nome: %s\n", estados[i]->nome);
            printf("Sigla: %s\n", estados[i]->sigla);
            printf("\n");
            return;
        }
    }
    printf("Estado não encontrado!\n");
}

// Busca estado por sigla usando ponteiros
void buscar_por_sigla(const char* sigla_a_buscar) {
    for (int i = 0; i < total_estados; i++) {
        if (strcmp(estados[i]->sigla, sigla_a_buscar) == 0) {
            printf("Codigo: %d\n", estados[i]->codigo);
            printf("Nome: %s\n", estados[i]->nome);
            printf("Sigla: %s\n", estados[i]->sigla);
            printf("\n");
            return;
        }
    }
    printf("Estado não encontrado!\n");
}

// Menu de buscas usando ponteiros
void buscar_estado() {
    int opcao;

    printf("1 - procurar estado pelo codigo. 2 - procurar estado pelo nome. 3 - procurar estado pelo sigla.\n");
    scanf("%d", &opcao);
    limpar_getchar();

    switch (opcao) {
        case 1: {
            char* nome = (char*)malloc(50 * sizeof(char));
            printf("Nome: ");
            fgets(nome, 50, stdin);
            nome[strcspn(nome, "\n")] = '\0';
            buscar_por_nome(nome);
            free(nome);
            break;
        }
        case 2: {
            int codigo;
            printf("codigo: ");
            scanf("%d", &codigo);
            limpar_getchar();
            buscar_por_codigo_uf(codigo);
            break;
        }
        case 3: {
            char* sigla = (char*)malloc(3 * sizeof(char));
            printf("Sigla (2 letras): ");
            fgets(sigla, 3, stdin);
            sigla[strcspn(sigla, "\n")] = '\0';
            buscar_por_sigla(sigla);
            free(sigla);
            break;
        }
        default:
            printf("Opção inválida!\n");
    }
}

// Edita um estado existente usando ponteiros
void editar_estado() {
    int codigo;
    printf("codigo do estado a editar: ");
    scanf("%d", &codigo);
    limpar_getchar();

    for (int i = 0; i < total_estados; i++) {
        if (estados[i]->codigo == codigo) {
            printf("Novo nome [atual: %s]: ", estados[i]->nome);
            fgets(estados[i]->nome, sizeof(estados[i]->nome), stdin);
            estados[i]->nome[strcspn(estados[i]->nome, "\n")] = '\0';

            printf("Nova sigla [atual: %s]: ", estados[i]->sigla);
            fgets(estados[i]->sigla, sizeof(estados[i]->sigla), stdin);
            estados[i]->sigla[strcspn(estados[i]->sigla, "\n")] = '\0';

            salvar_estados_arq();
            printf("Estado atualizado!\n");
            return;
        }
    }
    printf("Estado não encontrado!\n");
}

// Remove um estado usando ponteiros
void remover_estado() {
    int codigo;
    printf("codigo do estado a remover: ");
    scanf("%d", &codigo);
    limpar_getchar();

 for (int i = 0; i < total_estados; i++) {
        if (estados[i]->codigo == codigo) {
            free(estados[i]);

            for (int j = i; j < total_estados - 1; j++) {
                estados[j] = estados[j + 1];
            }

            total_estados--;
            estados = (estd**)realloc(estados, total_estados * sizeof(estd*));
            salvar_estados_arq();
            printf("estado explodido com sucesso!\n");
            return;
        }
    }
    printf("Estado não encontrado!\n");
}

// Menu principal
void menu_principal() {
    int opcao;
    do {
        printf("\nO que deseja realizar em seu banco de dados?\n");
        printf("oque deseja realizar em seu banco de dados?.\n");
        printf("1 - inserir estado. 2 - procurar estado.\n");
        printf("3 - listar estados. 4 - editar estado.\n");
        printf("5 - excluir estado. 0 - sair\n");
        scanf("%d", &opcao);
       limpar_getchar();

        switch (opcao) {
            case 1:
                 adicionar_estado_ui();
                break;

            case 2:
                 buscar_estado();
                break;
            case 3:
                 listar_estados();
                 break;
            case 4:
                 editar_estado();
                break;
            case 5:
                 remover_estado();
                break;
            case 0:
                 printf("Saindo...\n");
                break;
            default:
             printf("Opção inválida!\n");
        }
    } while (opcao != 0);
}

void func_main_uf() {
    carregar_estados();
    menu_principal();
    liberar_memoria_uf();
}

/*int main() {
    carregar_estados();

    printf("\n");
    printf("==================================\n");
    printf("  bem vindo as eleçoes IFCE 2025  \n");
    printf("==================================\n");
    printf("\n");
    printf("\n");

    menu_principal();
    liberar_memoria_uf();
    return 0;
}*/
